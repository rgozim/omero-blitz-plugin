package org.openmicroscopy.blitz

import org.gradle.api.GradleException
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.file.FileCollection
import org.gradle.api.logging.Logging
import org.gradle.api.plugins.JavaPlugin
import org.gradle.api.plugins.JavaPluginConvention
import org.gradle.api.tasks.Copy
import org.gradle.api.tasks.SourceSet
import org.gradle.api.tasks.compile.JavaCompile
import org.openmicroscopy.blitz.extensions.BlitzExtension
import org.openmicroscopy.blitz.tasks.ImportResourcesTask
import org.openmicroscopy.dsl.DslPlugin
import org.openmicroscopy.dsl.DslPluginBase
import org.openmicroscopy.dsl.extensions.DslExtension
import org.openmicroscopy.dsl.extensions.VelocityExtension
import org.openmicroscopy.dsl.tasks.DslBaseTask
import org.openmicroscopy.dsl.tasks.DslMultiFileTask

class BlitzPlugin implements Plugin<Project> {

    private static final def Log = Logging.getLogger(BlitzPlugin)

    private static final def patternXml = "**/*.ome.xml"

    private static final def patternType = "**/*-types.properties"

    DslExtension dsl

    BlitzExtension blitz

    @Override
    void apply(Project project) {
        if (project.plugins.withType(DslPlugin)) {
            throw new GradleException("DSL plugin overrides Blitz conventions")
        }

        // Apply the base dsl plugin, we set new conventions for it here.
        DslPluginBase dslPluginBase = project.plugins.apply(DslPluginBase)
        dsl = dslPluginBase.getDslExt()

        // Apply the base blitz plugin
        BlitzPluginBase blitzPluginBase = project.plugins.apply(BlitzPluginBase)
        blitz = blitzPluginBase.getBlitzExt()

        configureConventions(project)
        configureForJavaPlugin(project)
        configureForDslPlugin(project)

        registerStartupTasks(project)
    }

    void registerStartupTasks(Project project) {
        project.tasks.register("importMappings", ImportResourcesTask) {
            group = BlitzPluginBase.GROUP
            extractDir "$project.buildDir/mappings"
            includePattern patternXml
        }

        project.tasks.register("importDatabaseTypes", ImportResourcesTask) {
            group = BlitzPluginBase.GROUP
            extractDir "$project.buildDir/properties"
            includePattern patternType
        }

        project.tasks.register('generateCombinedFiles', DslMultiFileTask) { DslMultiFileTask task ->
            task.dependsOn project.tasks.named("importMappings"), project.tasks.named("importDatabaseTypes")
            task.group = BlitzPluginBase.GROUP
            task.description = "Processes combined.vm and generates .combined files"
            task.omeXmlFiles = blitz.omeXmlFiles
            task.databaseTypes = blitz.databaseTypes
            task.outputDir = blitz.combinedDir
            task.template = useFileOrFindInCollection(blitz.templates, blitz.template)
            task.formatOutput = { st -> "${st.getShortname()}I.combined" }
            task.velocityProperties = new VelocityExtension(project).data.get()
        }
    }

    void configureConventions(Project project) {
        // Set default dir for files generated by .combined files
        blitz.outputDir = "src/generated"

        // Set a default for .combined file output
        blitz.combinedDir = "${project.buildDir}/combined"

        // Set default conventions
        blitz.omeXmlFiles =
                project.fileTree(dir: "${project.buildDir}/mappings", include: "**/*.ome.xml")

        blitz.databaseTypes =
                project.fileTree(dir: "${project.buildDir}/properties", include: "**/*-types.properties")
    }

    void configureForJavaPlugin(Project project) {
        // Configure default outputDir
        project.plugins.withType(JavaPlugin) { JavaPlugin java ->
            // If we have java, resources are default here
            blitz.templates =
                    project.fileTree(dir: "src/main/resources/templates", include: "**/*.vm")

            JavaPluginConvention javaConvention =
                    project.convention.getPlugin(JavaPluginConvention)

            SourceSet main =
                    javaConvention.sourceSets.getByName(SourceSet.MAIN_SOURCE_SET_NAME)

            main.java.srcDirs "${project.blitz.outputDir}/java"
            main.resources.srcDirs "${project.blitz.outputDir}/resources"
        }
    }

    void configureForDslPlugin(Project project) {
        project.plugins.withType(DslPluginBase) { DslPluginBase dsl ->
            // Use the same outputDir as blitz
            project.dsl.outputDir = project.blitz.outputDir
            project.dsl.omeXmlFiles = project.blitz.omeXmlFiles
            project.dsl.databaseTypes = project.blitz.databaseTypes
            project.dsl.templates = project.blitz.templates

            // Set any DSL tasks to depend on import tasks
            project.tasks.withType(DslBaseTask).configureEach { DslBaseTask dslTask ->
                dslTask.dependsOn project.tasks.named("importMappings"),
                        project.tasks.named("importDatabaseTypes")
            }

            project.plugins.withType(JavaPlugin) {
                // Configure compileJava to depend on dsl tasks
                project.tasks.named("compileJava").configure { JavaCompile jc ->
                    jc.dependsOn project.tasks.withType(DslBaseTask)
                }
            }
        }
    }

    File useFileOrFindInCollection(FileCollection collection, File file) {
        if (file.isAbsolute() && file.isFile()) {
            return file
        }
        return collection.files.find { it.name == file.name }
    }

}

