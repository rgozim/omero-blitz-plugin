package org.openmicroscopy.blitz

import ome.dsl.SemanticType
import org.gradle.api.Action
import org.gradle.api.GradleException
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.Task
import org.gradle.api.artifacts.Configuration
import org.gradle.api.artifacts.ResolvedArtifact
import org.gradle.api.file.CopySpec
import org.gradle.api.file.FileCopyDetails
import org.gradle.api.logging.Logger
import org.gradle.api.logging.Logging
import org.gradle.api.plugins.ExtensionAware
import org.gradle.api.plugins.JavaPlugin
import org.gradle.api.plugins.JavaPluginConvention
import org.gradle.api.tasks.SourceSet
import org.gradle.api.tasks.Sync
import org.gradle.api.tasks.TaskProvider
import org.gradle.api.tasks.compile.JavaCompile
import org.openmicroscopy.blitz.extensions.BlitzExtension
import org.openmicroscopy.dsl.DslPlugin
import org.openmicroscopy.dsl.DslPluginBase
import org.openmicroscopy.dsl.extensions.MultiFileGeneratorExtension
import org.openmicroscopy.dsl.extensions.SingleFileGeneratorExtension
import org.openmicroscopy.dsl.extensions.VelocityExtension
import org.openmicroscopy.dsl.factories.MultiFileGeneratorFactory
import org.openmicroscopy.dsl.factories.SingleFileGeneratorFactory
import org.openmicroscopy.dsl.tasks.FileGeneratorTask
import org.openmicroscopy.dsl.tasks.FilesGeneratorTask
import org.openmicroscopy.dsl.tasks.GeneratorBaseTask

import static org.openmicroscopy.dsl.DslPluginBase.getOutputDirProvider
import static org.openmicroscopy.dsl.DslPluginBase.getOutputFileProvider
import static org.openmicroscopy.dsl.FileTypes.PATTERN_DB_TYPE
import static org.openmicroscopy.dsl.FileTypes.PATTERN_OME_XML
import static org.openmicroscopy.dsl.FileTypes.PATTERN_TEMPLATE

class BlitzPlugin implements Plugin<Project> {

    static final String GROUP = BlitzPluginBase.GROUP

    static final String EXTENSION_NAME_BLITZ = "blitz"

    static final String EXTENSION_NAME_VELOCITY = "velocity"

    static final String TASK_EVALUATE_DSL_INPUTS = "evaluateDslInputs"

    static final String TASK_IMPORT_OME_XML = 'importOmeXml'

    static final String TASK_IMPORT_DB_TYPES = 'importDbTypes'

    static final String TASK_IMPORT_MODEL_RESOURCES = 'importModelResources'

    static final String TASK_COPY_RESOURCES_ARCHIVE = "copyResourcesArchive"

    static final String TASK_GENERATE_COMBINED_FILES = "generateCombinedFiles"

    static final String TASK_PREFIX_GENERATE = "generate"

    private static final Logger Log = Logging.getLogger(BlitzPlugin)

    final Map<String, TaskProvider<GeneratorBaseTask>> fileGeneratorTasksMap = [:]

    @Override
    void apply(Project project) {
        if (project.plugins.withType(DslPlugin)) {
            throw new GradleException("Blitz overrides dsl plugin.")
        }

        // Run config get first
        Configuration config = ImportHelper.createDataFilesConfig(project)

        // Trigger resolution of artifact
        ResolvedArtifact artifact = config.resolvedConfiguration.resolvedArtifacts.find {
            it.name.contains("omero-model")
        }
        if (!artifact) {
            throw new GradleException("omero-model artifact not found")
        }

        // Create our import task BEFORE applying plugin
        TaskProvider<Sync> importTask = registerImportTask(project, artifact.file)

        // Apply base plugin
        project.plugins.apply(BlitzPluginBase)

        // velocity extension
        BlitzExtension blitz = BlitzPluginBase.getBlitzExtension(project.extensions)
        VelocityExtension velocity = BlitzPluginBase.getVelocityExtension(blitz)

        // Register tasks required to load default properties
        // Set default dir for files generated by .combinedFiles files
//        blitz.outputDir = project.layout.projectDirectory.dir("src/generated")
//        blitz.database = "psql"
//        blitz.combined.outputDir = "$project.buildDir/combined"
//        blitz.combined.template = "combined.vm"

        // Set default for velocity config
        velocity.checkEmptyObjects = false

        setGeneratorTaskDefaults(project, blitz, importTask)

        // Register the .combined generator task
        registerCombinedTask(project, blitz, velocity)

        // React to java plugin, set source dirs and resource dirs
        configureForJavaPlugin(project, blitz)
    }

    void createBaseExtension(Project project) {
        def multiFileGenContainer = project.container(MultiFileGeneratorExtension,
                new MultiFileGeneratorFactory(project))
        def singleFileGenContainer = project.container(SingleFileGeneratorExtension,
                new SingleFileGeneratorFactory(project))

        // Create the dsl extension
        def blitz = project.extensions.create(EXTENSION_NAME_BLITZ, BlitzExtension,
                project, multiFileGenContainer, singleFileGenContainer)

        def velocity = ((ExtensionAware) blitz).extensions
                .create(EXTENSION_NAME_VELOCITY, VelocityExtension, project)

        multiFileGenContainer.whenObjectAdded { MultiFileGeneratorExtension ext ->
            addMultiFileGenTask(project, blitz, ext)
        }

        singleFileGenContainer.whenObjectAdded { SingleFileGeneratorExtension ext ->
            addSingleFileGenTask(project, blitz, ext)
        }

        // Manually add a task via dsl
        registerCombinedTask(project, blitz)

        // Add
    }

    void addMultiFileGenTask(Project project, BlitzExtension blitz, MultiFileGeneratorExtension ext) {
        def taskName = TASK_PREFIX_GENERATE + ext.name.capitalize() + blitz.database.get().capitalize()
        def taskProvider = project.tasks.register(taskName, FilesGeneratorTask, new Action<FilesGeneratorTask>() {
            @Override
            void execute(FilesGeneratorTask t) {
                t.group = GROUP
                t.formatOutput = ext.formatOutput
                t.outputDir = getOutputDirProvider(blitz.outputDir, ext.outputDir)
                t.dependsOn project.tasks.named(TASK_EVALUATE_DSL_INPUTS)
            }
        })
        fileGeneratorTasksMap.put(taskName, taskProvider)
    }

    void addSingleFileGenTask(Project project, BlitzExtension blitz, SingleFileGeneratorExtension ext) {
        def taskName = TASK_PREFIX_GENERATE + ext.name.capitalize() + blitz.database.get().capitalize()
        def taskProvider = project.tasks.register(taskName, FileGeneratorTask, new Action<FileGeneratorTask>() {
            @Override
            void execute(FileGeneratorTask t) {
                t.group = GROUP
                t.outputFile = getOutputFileProvider(blitz.outputDir, ext.outputFile)
                t.dependsOn project.tasks.named(TASK_EVALUATE_DSL_INPUTS)
            }
        })
        fileGeneratorTasksMap.put(taskName, taskProvider)
    }

    TaskProvider<Sync> registerImportTask(Project project, Object from) {
        project.tasks.register(TASK_IMPORT_MODEL_RESOURCES, Sync, new Action<Sync>() {
            @Override
            void execute(Sync sync) {
                sync.with {
                    into("$project.buildDir")
                    into("mappings", new Action<CopySpec>() {
                        @Override
                        void execute(CopySpec copySpec) {
                            copySpec.from(project.zipTree(from))
                            copySpec.include(PATTERN_OME_XML)
                            copySpec.eachFile { FileCopyDetails copyDetails ->
                                copyDetails.path = "mappings/$copyDetails.name"
                            }
                        }
                    })
                    into("databaseTypes", new Action<CopySpec>() {
                        @Override
                        void execute(CopySpec copySpec) {
                            copySpec.from(project.zipTree(from))
                            copySpec.include(PATTERN_DB_TYPE)
                            copySpec.eachFile { FileCopyDetails copyDetails ->
                                copyDetails.path = "databaseTypes/$copyDetails.name"
                            }
                        }
                    })
                    includeEmptyDirs = false
                }
            }
        })
    }

    Task createEvaluateDslInputsTask(Project project, TaskProvider importTask) {
        BlitzExtension blitz = BlitzPluginBase.getBlitzExtension(project.extensions)

        project.tasks.create(TASK_EVALUATE_DSL_INPUTS, new Action<Task>() {
            @Override
            void execute(Task task) {
                task.dependsOn importTask
                task.doLast {
                    fileGeneratorTasksMap.values().each { TaskProvider<GeneratorBaseTask> taskProvider ->
                        taskProvider.configure { generatorTask ->
                            generatorTask.omeXmlFiles = importTask
                            generatorTask.template = DslPluginBase.findTemplate(project, project.files(importTask),
                                    blitz.template.get())
                        }
                    }

                    project.tasks.withType(GeneratorBaseTask).configureEach { GeneratorBaseTask genTask ->
                        genTask.omeXmlFiles = importTask
                        genTask.template = DslPluginBase.findTemplate(project, project.files(importTask),
                                blitz.template.get())
                        genTask.databaseType = DslPluginBase.findDatabaseType(project, project.files(importTask),
                                blitz.database.get())
                    }
                }
            }
        })
    }

    void registerCombinedTask(Project project, BlitzExtension blitz) {
        def extension = new MultiFileGeneratorExtension("combinedFiles", project).with { ext ->
            ext.outputDir = new File("$project.buildDir/combined")
            ext.formatOutput = { SemanticType st -> "${st.getShortname()}I.combinedFiles" }
            ext.template = "combined.vm"
        }
        blitz.multiFile.add(extension)

//        project.tasks.register(TASK_GENERATE_COMBINED_FILES, FilesGeneratorTask, new Action<FilesGeneratorTask>() {
//            @Override
//            void execute(FilesGeneratorTask t) {
//                t.group = GROUP
//                t.description = "Generates .combined files"
//                t.velocityConfig = velocity.data
//                t.omeXmlFiles = blitz.omeXmlFiles
//                t.outputDir = getOutputDirProvider(blitz.outputDir, blitz.combined.outputDir)
//                t.formatOutput { SemanticType st -> "${st.getShortname()}I.combinedFiles" }
//                t.dependsOn project.tasks.named(TASK_EVALUATE_DSL_INPUTS)
//            }
//        })
    }

    void configureForJavaPlugin(Project project, BlitzExtension blitz) {
        // Configure default outputDir
        project.plugins.withType(JavaPlugin) { JavaPlugin java ->
            blitz.templates =
                    project.fileTree(dir: "src/main/resources/templates", include: PATTERN_TEMPLATE)

            JavaPluginConvention javaConvention =
                    project.convention.getPlugin(JavaPluginConvention)

            SourceSet main =
                    javaConvention.sourceSets.getByName(SourceSet.MAIN_SOURCE_SET_NAME)

            main.java.srcDirs "${blitz.outputDir}/java"
            main.resources.srcDirs "${blitz.outputDir}/resources"

            // Configure compileJava to depend on dsl tasks
            project.tasks.named("compileJava").configure { JavaCompile jc ->
                jc.dependsOn project.tasks.withType(GeneratorBaseTask)
            }
        }
    }

    private static ResolvedArtifact getOmeroModel(Project project) {
        ResolvedArtifact artifact = ImportHelper.getOmeroModelArtifact(project)
        if (!artifact) {
            throw new GradleException("Can\'t obtain omero-model as a dependency")
        }
        return artifact
    }

}

