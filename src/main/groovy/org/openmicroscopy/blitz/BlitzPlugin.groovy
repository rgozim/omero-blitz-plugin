package org.openmicroscopy.blitz

import groovy.transform.CompileStatic
import ome.dsl.SemanticType
import org.gradle.api.Action
import org.gradle.api.GradleException
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.logging.Logger
import org.gradle.api.logging.Logging
import org.gradle.api.plugins.ExtensionAware
import org.gradle.api.plugins.JavaPlugin
import org.gradle.api.plugins.JavaPluginConvention
import org.gradle.api.tasks.SourceSet
import org.gradle.api.tasks.compile.JavaCompile
import org.openmicroscopy.blitz.extensions.BlitzExtension
import org.openmicroscopy.blitz.extensions.SplitExtension
import org.openmicroscopy.blitz.factories.SplitFactory
import org.openmicroscopy.blitz.tasks.ImportResourcesTask
import org.openmicroscopy.blitz.tasks.SplitTask
import org.openmicroscopy.dsl.DslPlugin
import org.openmicroscopy.dsl.DslPluginBase
import org.openmicroscopy.dsl.extensions.CodeExtension
import org.openmicroscopy.dsl.extensions.DslExtension
import org.openmicroscopy.dsl.extensions.ResourceExtension
import org.openmicroscopy.dsl.extensions.VelocityExtension
import org.openmicroscopy.dsl.factories.CodeFactory
import org.openmicroscopy.dsl.factories.ResourceFactory
import org.openmicroscopy.dsl.tasks.DslBaseTask
import org.openmicroscopy.dsl.tasks.DslMultiFileTask

@CompileStatic
class BlitzPlugin implements Plugin<Project> {

    private static final Logger Log = Logging.getLogger(BlitzPlugin)

    private static final def patternXml = "**/*.ome.xml"

    private static final def patternType = "**/*-types.properties"

    @Override
    void apply(Project project) {
        if (project.plugins.withType(DslPlugin)) {
            throw new GradleException("DSL plugin overrides Blitz conventions")
        }

        BlitzExtension blitz = createBlitzExtension(project)

        // Create an inner dsl like syntax for blitz {}
        DslPluginBase.configure(project, blitz)

        ApiPluginBase. ((ExtensionAware) blitz).extensions

        // Register our tasks
        registerStartupTasks(project, blitz)

        // Configure default conventions for blitz plugin
        configureConventions(project, blitz)

        // React to java plugin inclusion
        configureForJavaPlugin(project, blitz)

        // React to DSL plugin base inclusion and set new conventions
        configureForDslPlugin(project, blitz)
    }


    BlitzExtension createBlitzExtension(Project project) {
        def code = project.container(CodeExtension, new CodeFactory(project))
        def resource = project.container(ResourceExtension, new ResourceFactory(project))

        // Create the dsl extension
        return project.extensions.create('blitz', BlitzExtension, project, code, resource)
    }

    private static void configureConventions(Project project, BlitzExtension blitz) {
        // Set default dir for files generated by .combinedFiles files
        blitz.outputDir = "src/generated"
        blitz.omeXmlFiles = project.fileTree(dir: "${project.buildDir}/mappings",
                include: "**/*.ome.xml")
        blitz.databaseTypes = project.fileTree(dir: "${project.buildDir}/properties",
                include: "**/*-types.properties")
    }

    private static void configureForJavaPlugin(Project project, BlitzExtension blitz) {
        // Configure default outputDir
        project.plugins.withType(JavaPlugin) { JavaPlugin java ->
            // If we have java, resources are default here
            blitz.templates = project.fileTree(dir: "src/main/resources/templates", include: "**/*.vm")

            JavaPluginConvention javaConvention =
                    project.convention.getPlugin(JavaPluginConvention)

            SourceSet main =
                    javaConvention.sourceSets.getByName(SourceSet.MAIN_SOURCE_SET_NAME)

            main.java.srcDirs "${blitz.outputDir}/java"
            main.resources.srcDirs "${blitz.outputDir}/resources"
        }
    }

    private static void configureForDslPlugin(Project project, BlitzExtension blitz) {
        project.plugins.withType(DslPluginBase) { DslPluginBase plugin ->
            // Set default conventions
            blitz.outputDir = "src/generated"
            blitz.omeXmlFiles = project.fileTree(dir: "${project.buildDir}/mappings", include: "**/*.ome.xml")
            blitz.databaseTypes = project.fileTree(dir: "${project.buildDir}/properties",
                    include: "**/*-types.properties")
            blitz.templates = project.fileTree(dir: "src/main/resources/templates", include: "**/*-types.properties")

            // Set any DSL tasks to depend on import tasks
            project.tasks.withType(DslBaseTask).configureEach { DslBaseTask dslTask ->
                dslTask.dependsOn project.tasks.named("importMappings"),
                        project.tasks.named("importDatabaseTypes")
            }

            project.plugins.withType(JavaPlugin) {
                // Configure compileJava to depend on dsl tasks
                project.tasks.named("compileJava").configure { JavaCompile jc ->
                    jc.dependsOn project.tasks.withType(DslBaseTask)
                }
            }
        }
    }

    private static void registerStartupTasks(Project project, BlitzExtension blitz) {
        project.tasks.register("importMappings", ImportResourcesTask, new Action<ImportResourcesTask>() {
            @Override
            void execute(ImportResourcesTask t) {
                t.group = BlitzPluginBase.GROUP
                t.extractDir = "$project.buildDir/mappings"
                t.includePattern = patternXml
            }
        })

        project.tasks.register("importDatabaseTypes", ImportResourcesTask, new Action<ImportResourcesTask>() {
            @Override
            void execute(ImportResourcesTask t) {
                t.group = BlitzPluginBase.GROUP
                t.extractDir = "$project.buildDir/properties"
                t.includePattern = patternType
            }
        })

        project.tasks.register("generateCombinedFiles", DslMultiFileTask, new Action<DslMultiFileTask>() {
            @Override
            void execute(DslMultiFileTask t) {
                t.group = BlitzPluginBase.GROUP
                t.description = "Processes combinedFiles.vm and generates .combinedFiles files"
                t.omeXmlFiles = blitz.omeXmlFiles
                t.databaseTypes = blitz.databaseTypes
                t.outputDir = blitz.combinedOutputDir
                t.template = getFileInCollection(blitz.templates, blitz.template)
                t.formatOutput = { SemanticType st -> "${st.getShortname()}I.combinedFiles" }
                t.velocityProperties = new VelocityExtension(project).data.get()
            }
        })

        // Set split tasks to depend on "generateCombinedFiles"
        project.tasks.withType(SplitTask).configureEach(new Action<SplitTask>() {
            @Override
            void execute(SplitTask t) {
                t.dependsOn project.tasks.named("generateCombinedFiles")
            }
        })
    }

}

