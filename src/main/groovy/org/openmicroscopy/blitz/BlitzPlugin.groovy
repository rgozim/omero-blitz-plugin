package org.openmicroscopy.blitz

import groovy.transform.CompileStatic
import ome.dsl.SemanticType
import org.gradle.api.Action
import org.gradle.api.GradleException
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.artifacts.ResolvedArtifact
import org.gradle.api.file.CopySpec
import org.gradle.api.file.FileCopyDetails
import org.gradle.api.file.FileTree
import org.gradle.api.logging.Logger
import org.gradle.api.logging.Logging
import org.gradle.api.plugins.JavaPlugin
import org.gradle.api.plugins.JavaPluginConvention
import org.gradle.api.tasks.Copy
import org.gradle.api.tasks.SourceSet
import org.gradle.api.tasks.Sync
import org.gradle.api.tasks.TaskProvider
import org.gradle.api.tasks.compile.JavaCompile
import org.openmicroscopy.api.ApiPlugin
import org.openmicroscopy.api.tasks.SplitTask
import org.openmicroscopy.blitz.extensions.BlitzExtension
import org.openmicroscopy.dsl.DslPlugin
import org.openmicroscopy.dsl.DslPluginBase
import org.openmicroscopy.dsl.FileTypes
import org.openmicroscopy.dsl.extensions.CodeExtension
import org.openmicroscopy.dsl.extensions.ResourceExtension
import org.openmicroscopy.dsl.extensions.VelocityExtension
import org.openmicroscopy.dsl.factories.CodeFactory
import org.openmicroscopy.dsl.factories.ResourceFactory
import org.openmicroscopy.dsl.tasks.DslBaseTask
import org.openmicroscopy.dsl.tasks.DslMultiFileTask

@CompileStatic
class BlitzPlugin implements Plugin<Project> {

    public static final String GROUP = "omero-blitz"

    private static final Logger Log = Logging.getLogger(BlitzPlugin)


    @Override
    void apply(Project project) {
        if (project.plugins.withType(DslPlugin)) {
            throw new GradleException("DSL plugin overrides Blitz conventions")
        }

        // BlitzExtension
        BlitzExtension blitz = createBaseExtension(project)

        // Create an inner dsl like syntax for blitz {}
        DslPluginBase.configure(project, blitz)

        registerImportTasks(project)
        registerCombinedTask(project, blitz)

        // ApiPluginBase. ((ExtensionAware) blitz).extensions

        configureForApiPlugin(project)

        // Configure default conventions for blitz plugin
        configureConventions(project, blitz)

        // React to java plugin inclusion
        configureForJavaPlugin(project, blitz)
    }

    BlitzExtension createBaseExtension(Project project) {
        def code = project.container(CodeExtension, new CodeFactory(project))
        def resource = project.container(ResourceExtension, new ResourceFactory(project))

        // Create the dsl extension
        return project.extensions.create('blitz', BlitzExtension, project, code, resource)
    }

    private static void configureConventions(Project project, BlitzExtension blitz) {
        // Set default dir for files generated by .combinedFiles files
        blitz.outputDir = "src/generated"

        blitz.combinedOutputDir = "${project.buildDir}/combined"

        // If no values have been set for these properties, we resort to using
//        blitz.omeXmlFiles = project.fileTree(dir: "${project.buildDir}/mappings",
//                include: "$FileTypes.PATTERN_OME_XML")
//
//        blitz.databaseTypes = project.fileTree(dir: "${project.buildDir}/properties",
//                include: "$FileTypes.PATTERN_DB_TYPE")


        // Set any DSL tasks to depend on import tasks
        project.tasks.withType(DslBaseTask).configureEach(new Action<DslBaseTask>() {
            @Override
            void execute(DslBaseTask dslTask) {
                dslTask.dependsOn project.tasks.named("importMappings"),
                        project.tasks.named("importDatabaseTypes")
            }
        })

        project.plugins.withType(JavaPlugin) {
            // Configure compileJava to depend on dsl tasks
            project.tasks.named("compileJava").configure { JavaCompile jc ->
                jc.dependsOn project.tasks.withType(DslBaseTask)
            }
        }
    }

    static List<TaskProvider<Sync>> registerImportTasks(Project project) {
        def importMappings = project.tasks.register("importMappings", Sync)
        def importDatabaseTypes = project.tasks.register("importDatabaseTypes", Sync)

        project.afterEvaluate {
            ResolvedArtifact omeroModel = new ImportHelper(project)
                    .getOmeroModelArtifact()
            if (!omeroModel) {
                throw new GradleException("Can\'t find omero-model as a dependency")
            }

            FileTree omeroModelFiles = project.zipTree(omeroModel.file)

            CopySpec copySpec = project.copySpec(new Action<CopySpec>() {
                @Override
                void execute(CopySpec copySpec) {
                    copySpec.from(omeroModelFiles)
                    copySpec.setIncludeEmptyDirs(false)
                    copySpec.eachFile { FileCopyDetails copyDetails ->
                        copyDetails.path = copyDetails.name
                    }
                }
            })

            importMappings.configure(new Action<Sync>() {
                @Override
                void execute(Sync t) {
                    t.setGroup(GROUP)
                    t.into("$project.buildDir/mappings")
                    t.setIncludes([FileTypes.PATTERN_OME_XML])
                    t.with(copySpec)
                }
            })

            importDatabaseTypes.configure(new Action<Sync>() {
                @Override
                void execute(Sync t) {
                    t.setGroup(GROUP)
                    t.into("$project.buildDir/properties")
                    t.setIncludes([FileTypes.PATTERN_DB_TYPE])
                    t.with(copySpec)
                }
            })
        }

        return [importMappings, importDatabaseTypes]
    }


    static TaskProvider<DslMultiFileTask> registerCombinedTask(Project project, BlitzExtension blitz) {
        def generateCombinedFiles = project.tasks.register("generateCombinedFiles", DslMultiFileTask)
        project.afterEvaluate {
            TaskProvider<Sync> importMappings = project.tasks.named("importMappings") as TaskProvider<Sync>
            def importDatabaseTypes = project.tasks.getByName("importDatabaseTypes")

            generateCombinedFiles.configure(new Action<DslMultiFileTask>() {
                @Override
                void execute(DslMultiFileTask t) {
//                t.dependsOn project.tasks.named("importMappings"),
//                        project.tasks.named("importDatabaseTypes")
                    t.omeXmlFiles = project.files(importMappings.get().outputs.files)
                    t.databaseTypes = project.files(importDatabaseTypes)
                    t.template = DslPluginBase.getFileInCollection(blitz.templates, blitz.template)
                    t.outputDir = blitz.combinedOutputDir
                    t.databaseType = blitz.databaseType
                    t.formatOutput = { SemanticType st -> "${st.getShortname()}I.combinedFiles" }
                    t.velocityProperties = new VelocityExtension(project).data.get()
                    t.group = GROUP
                    t.description = "Processes combinedFiles.vm and generates .combinedFiles files"
                }
            })
        }
        return generateCombinedFiles
    }

    private static void configureForApiPlugin(Project project) {
        project.plugins.withType(ApiPlugin) { ApiPlugin java ->
            // Set split tasks to depend on "generateCombinedFiles"
            project.tasks.withType(SplitTask).configureEach(new Action<SplitTask>() {
                @Override
                void execute(SplitTask t) {
                    t.dependsOn project.tasks.named("generateCombinedFiles")
                }
            })
        }
    }

    private static void configureForJavaPlugin(Project project, BlitzExtension blitz) {
        // Configure default outputDir
        project.plugins.withType(JavaPlugin) { JavaPlugin java ->
            // If we have java, resources are default here
            blitz.templates = project.fileTree(dir: "src/main/resources/templates",
                    include: FileTypes.PATTERN_TEMPLATE)

            JavaPluginConvention javaConvention =
                    project.convention.getPlugin(JavaPluginConvention)

            SourceSet main =
                    javaConvention.sourceSets.getByName(SourceSet.MAIN_SOURCE_SET_NAME)

            main.java.srcDirs "${blitz.outputDir}/java"
            main.resources.srcDirs "${blitz.outputDir}/resources"
        }
    }

}

