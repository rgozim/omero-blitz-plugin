package org.openmicroscopy.blitz

import groovy.transform.CompileStatic
import org.gradle.api.Action
import org.gradle.api.GradleException
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.Task
import org.gradle.api.artifacts.ResolvedArtifact
import org.gradle.api.file.CopySpec
import org.gradle.api.file.FileCopyDetails
import org.gradle.api.file.FileTree
import org.gradle.api.logging.Logger
import org.gradle.api.logging.Logging
import org.gradle.api.plugins.JavaPlugin
import org.gradle.api.plugins.JavaPluginConvention
import org.gradle.api.tasks.SourceSet
import org.gradle.api.tasks.Sync
import org.gradle.api.tasks.TaskProvider
import org.gradle.api.tasks.compile.JavaCompile
import org.openmicroscopy.api.ApiPlugin
import org.openmicroscopy.api.tasks.SplitTask
import org.openmicroscopy.blitz.extensions.BlitzExtension
import org.openmicroscopy.dsl.DslPlugin
import org.openmicroscopy.dsl.DslPluginBase
import org.openmicroscopy.dsl.FileTypes
import org.openmicroscopy.dsl.extensions.FileGeneratorExtension
import org.openmicroscopy.dsl.extensions.FilesGeneratorExtension
import org.openmicroscopy.dsl.factories.FileGeneratorExtFactory
import org.openmicroscopy.dsl.factories.FilesGeneratorExtFactory
import org.openmicroscopy.dsl.tasks.GeneratorBaseTask

@CompileStatic
class BlitzPlugin implements Plugin<Project> {

    public static final String GROUP = BlitzPluginBase.GROUP

    private static final Logger Log = Logging.getLogger(BlitzPlugin)

    @Override
    void apply(Project project) {
        if (project.plugins.withType(DslPlugin)) {
            throw new GradleException("Blitz overrides dsl plugin.")
        }

        // BlitzExtension
        BlitzExtension blitz = createBaseExtension(project)

        // Create an inner dsl like syntax for blitz {}
        DslPluginBase.configure(project, blitz)

        // Conventions to set defaults for blitz
        configureConventions(project, blitz)

        registerImportTasks(project)

        configureForApiPlugin(project)

        // Configure default conventions for blitz plugin


        // React to java plugin inclusion
        configureForJavaPlugin(project, blitz)
    }

    BlitzExtension createBaseExtension(Project project) {
        def code = project.container(FilesGeneratorExtension, new FilesGeneratorExtFactory(project))
        def resource = project.container(FileGeneratorExtension, new FileGeneratorExtFactory(project))

        // Create the dsl extension
        return project.extensions.create('blitz', BlitzExtension, project, code, resource)
    }

    private static void configureConventions(Project project, BlitzExtension blitz) {
        // Set default dir for files generated by .combinedFiles files
        blitz.outputDir = "src/generated"

        blitz.combinedOutputDir = "${project.buildDir}/combined"

        project.tasks.named("generateCombinedFiles").configure(new Action<Task>() {
            @Override
            void execute(Task t) {
                t.omeXmlFiles = project.tasks.named("importMappings")
                t.databaseTypes = project.tasks.getByName("importDatabaseTypes")
            }
        })
    }

    private static List<TaskProvider<Sync>> registerImportTasks(Project project) {
        def importMappings = project.tasks.register("importMappings", Sync)
        def importDatabaseTypes = project.tasks.register("importDatabaseTypes", Sync)

        // Configuration of import tasks takes place in an afterEvaluate block as
        // we have to wait for project evaluation to complete before we can obtain
        // a reference to an omero-model jar from dependencies.
        project.afterEvaluate {
            ResolvedArtifact omeroModel = new ImportHelper(project)
                    .getOmeroModelArtifact()
            if (!omeroModel) {
                throw new GradleException("Can\'t find omero-model as a dependency")
            }

            FileTree omeroModelFiles = project.zipTree(omeroModel.file)

            CopySpec copySpec = project.copySpec(new Action<CopySpec>() {
                @Override
                void execute(CopySpec copySpec) {
                    copySpec.from(omeroModelFiles)
                    copySpec.setIncludeEmptyDirs(false)
                    copySpec.eachFile { FileCopyDetails copyDetails ->
                        copyDetails.path = copyDetails.name
                    }
                }
            })

            importMappings.configure(new Action<Sync>() {
                @Override
                void execute(Sync t) {
                    t.setGroup(GROUP)
                    t.into("$project.buildDir/mappings")
                    t.setIncludes([FileTypes.PATTERN_OME_XML])
                    t.with(copySpec)
                }
            })

            importDatabaseTypes.configure(new Action<Sync>() {
                @Override
                void execute(Sync t) {
                    t.setGroup(GROUP)
                    t.into("$project.buildDir/properties")
                    t.setIncludes([FileTypes.PATTERN_DB_TYPE])
                    t.with(copySpec)
                }
            })
        }

        return [importMappings, importDatabaseTypes]
    }

    private static void configureForApiPlugin(Project project) {
        project.plugins.withType(ApiPlugin) { ApiPlugin java ->
            // Set split tasks to depend on "generateCombinedFiles"
            project.tasks.withType(SplitTask).configureEach(new Action<SplitTask>() {
                @Override
                void execute(SplitTask t) {
                    t.combinedFiles = project.tasks.named("generateCombinedFiles")
                }
            })
        }
    }

    private static void configureForJavaPlugin(Project project, BlitzExtension blitz) {
        // Configure default outputDir
        project.plugins.withType(JavaPlugin) { JavaPlugin java ->
            // If we have java, resources are default here
            blitz.templates = project.fileTree(dir: "src/main/resources/templates",
                    include: FileTypes.PATTERN_TEMPLATE)

            JavaPluginConvention javaConvention =
                    project.convention.getPlugin(JavaPluginConvention)

            SourceSet main =
                    javaConvention.sourceSets.getByName(SourceSet.MAIN_SOURCE_SET_NAME)

            main.java.srcDirs "${blitz.outputDir}/java"
            main.resources.srcDirs "${blitz.outputDir}/resources"

            // Configure compileJava to depend on dsl tasks
            project.tasks.named("compileJava").configure { JavaCompile jc ->
                jc.dependsOn project.tasks.withType(GeneratorBaseTask)
            }
        }
    }

}

